# Merge NPC with Air_Pollutant ratios
selected_cols <- EPA_f923_2023[, .(Facility_ID = `Plant ID`, PM_lbs_mmBTU = `PM Emissions Rate \r\n(lbs/MMBtu)`, PM_eff = `PM Removal Efficiency Rate\r\n at Annual Operating Factor`)]
selected_cols$PM_lbs_mmBTU <- as.numeric(selected_cols$PM_lbs_mmBTU)
selected_cols$PM_eff <- as.numeric(selected_cols$PM_eff)
selected_cols <- selected_cols[!is.na(selected_cols$PM_lbs_mmBTU) & !is.na(selected_cols$PM_eff)]
selected_cols <- selected_cols[, .(Facility_ID, PM_lbs_mmBTU = PM_lbs_mmBTU * PM_eff)]
selected_cols <- selected_cols[, .(PM_lbs_mmBTU = mean(PM_lbs_mmBTU, na.rm = TRUE)), by = Facility_ID]
Air_Pollutant_Fuels_NPC_USA <- selected_cols[Fossil_Fuels_NPC_USA, on = .(Facility_ID), allow.cartesian = TRUE]
Air_Pollutant_Fuels_NPC_USA[, Fuel_Category := fcase(
grepl("oil", Primary_Fuel_Type, ignore.case = TRUE), "Oil",
grepl("coal", Primary_Fuel_Type, ignore.case = TRUE), "Coal",
grepl("wood", Primary_Fuel_Type, ignore.case = TRUE), "Wood",
grepl("gas", Primary_Fuel_Type, ignore.case = TRUE) & grepl("Combustion Turbine", Unit_Type, ignore.case = TRUE), "Gas_CT",
grepl("gas", Primary_Fuel_Type, ignore.case = TRUE), "Gas_CC",
default = "Other"
)]
mean_ratios_USA <- Air_Pollutant_Fuels_NPC_USA[, .(
mean_PM_lbs_mmBTU = mean(PM_lbs_mmBTU, na.rm = TRUE)
), by = Fuel_Category]
# filter for NE
Facility_ID_NE <- unique(Facilities_Data$Facility_ID)
EPA_f923_2023 <- EPA_f923_2023[`Plant ID` %in% Facility_ID_NE]
# Add in fuel category
Facilities_Data[, Fuel_Category := fcase(
grepl("oil", Primary_Fuel_Type, ignore.case = TRUE), "Oil",
grepl("coal", Primary_Fuel_Type, ignore.case = TRUE), "Coal",
grepl("wood", Primary_Fuel_Type, ignore.case = TRUE), "Wood",
grepl("gas", Primary_Fuel_Type, ignore.case = TRUE) & grepl("Combustion Turbine", Unit_Type, ignore.case = TRUE), "Gas_CT",
grepl("gas", Primary_Fuel_Type, ignore.case = TRUE), "Gas_CC",
default = "Other"
)]
Air_Pollutant_Fuels_NPC <- selected_cols[Facilities_Data, on = .(Facility_ID), allow.cartesian = TRUE]
mean_ratios <- Air_Pollutant_Fuels_NPC[, .(
mean_PM_lbs_mmBTU = mean(PM_lbs_mmBTU, na.rm = TRUE)
), by = Fuel_Category]
# Merge the mean ratios back to the main data
Air_Pollutant_Fuels_NPC <- merge(Air_Pollutant_Fuels_NPC, mean_ratios, by = "Fuel_Category", all.x = TRUE)
# Replace NA values with the mean ratios
Air_Pollutant_Fuels_NPC[is.na(PM_lbs_mmBTU), PM_lbs_mmBTU := mean_PM_lbs_mmBTU]
# For coal it is still NaN we use the same value as oil
Air_Pollutant_Fuels_NPC[is.na(PM_lbs_mmBTU), PM_lbs_mmBTU := mean_ratios_USA$mean_PM_lbs_mmBTU[1]] # add in Coal
# Drop the mean ratio columns as they are no longer needed
Air_Pollutant_Fuels_NPC[, c("mean_PM_lbs_mmBTU") := NULL]
# Merge Facilities with yearly results
selected_cols <- Air_Pollutant_Fuels_NPC[, .(Facility_Unit.ID, PM_lbs_mmBTU, mean_NOx_lbs_MW,
mean_SO2_lbs_MW, mean_HI_mmBtu_per_MW = mean_Heat_Input_mmBtu/Estimated_NameplateCapacity_MW, mean_NOx_lbs_MW_estimate,
mean_SO2_lbs_MW_estimate, mean_HI_mmBtu_per_MW_estimate = mean_HI_mmBtu_per_MW)]
Facility_Level_Results <- selected_cols[Facility_Level_Results, on = "Facility_Unit.ID"]
# Calculate NOx
Facility_Level_Results$total_NOx_lbs <- Facility_Level_Results$total_generation_GWh * 1e3 * Facility_Level_Results$mean_SO2_lbs_MW
Facility_Level_Results$total_NOx_lbs <- ifelse(
is.na(Facility_Level_Results$total_NOx_lbs),
Facility_Level_Results$total_generation_GWh * 1e3 *
Facility_Level_Results$mean_NOx_lbs_MW_estimate,
Facility_Level_Results$total_NOx_lbs
)
# Calculate SO2
Facility_Level_Results$total_SO2_lbs <- Facility_Level_Results$total_generation_GWh * 1e3 * Facility_Level_Results$mean_SO2_lbs_MW
Facility_Level_Results$total_SO2_lbs <- ifelse(
is.na(Facility_Level_Results$total_SO2_lbs),
Facility_Level_Results$total_generation_GWh * 1e3 *
Facility_Level_Results$mean_SO2_lbs_MW_estimate,
Facility_Level_Results$total_SO2_lbs
)
# Calculate HI
Facility_Level_Results$total_HI_mmBtu <- Facility_Level_Results$total_generation_GWh * 1e3 * Facility_Level_Results$mean_HI_mmBtu_per_MW
Facility_Level_Results$total_HI_mmBtu <- ifelse(
is.na(Facility_Level_Results$total_HI_mmBtu),
Facility_Level_Results$total_generation_GWh * 1e3 *
Facility_Level_Results$mean_HI_mmBtu_per_MW_estimate,
Facility_Level_Results$total_HI_mmBtu
)
# Calculate PM.total
Facility_Level_Results[, PM.total_tons := total_HI_mmBtu * PM_lbs_mmBTU * lbs_tons_conversion]
# Calculate PM2.5 and PM10 using total costs NY Paper
Facility_Level_Results[, PM2.5_tons := fcase(
grepl("oil", Fuel_type_1, ignore.case = TRUE), PM.total_tons * 69/100,
grepl("coal", Fuel_type_1, ignore.case = TRUE), PM.total_tons * 32.5/100,
grepl("wood", Fuel_type_1, ignore.case = TRUE), PM.total_tons,
grepl("gas", Fuel_type_1, ignore.case = TRUE), PM.total_tons
)]
Facility_Level_Results[, PM10_tons := fcase(
grepl("oil", Fuel_type_1, ignore.case = TRUE), PM.total_tons - PM2.5_tons,
grepl("coal", Fuel_type_1, ignore.case = TRUE), PM.total_tons - PM2.5_tons,
grepl("wood", Fuel_type_1, ignore.case = TRUE), PM.total_tons - PM2.5_tons,
grepl("gas", Fuel_type_1, ignore.case = TRUE), PM.total_tons - PM2.5_tons
)]
# NOx and SOx lbs to tons
Facility_Level_Results[, total_NOx_tons := total_NOx_lbs * lbs_tons_conversion]
Facility_Level_Results[, total_SO2_tons := total_SO2_lbs * lbs_tons_conversion]
# CO calculation
# Data from EPA AP 42
# Calculate total CO emissions using conditional logic with fcase
Facility_Level_Results[, CO_tons := fcase(
grepl("oil", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * (5/150) * lbs_tons_conversion,  # Oil (Distillate), 150 MMBtu/103gal
grepl("coal", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * (0.5/26) * lbs_tons_conversion,     # Coal lbs/tons/26(mmBtu/tons) as per AP42
grepl("wood", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * 0.6 * lbs_tons_conversion,     # Wood, directly from AP42 table
grepl("gas", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * 3.0e-02 * lbs_tons_conversion  # Natural Gas, directly from AP42 table
)]
# Calculate total VOC emissions using conditional logic with fcase
Facility_Level_Results[, VOC_tons := fcase(
grepl("oil", Fuel_type_1, ignore.case = TRUE), PM.total_tons * 0.35,  # Oil (Distillate) Organic matter is 35% of total PM
grepl("coal", Fuel_type_1, ignore.case = TRUE), PM.total_tons * 0.2,  # Coal Organic matter is 20% of total PM
grepl("wood", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * 0.017 * lbs_tons_conversion,    # Wood, directly from AP42 table
grepl("gas", Fuel_type_1, ignore.case = TRUE), total_HI_mmBtu * 2.1e-03 * lbs_tons_conversion  # Natural Gas, directly from AP42 table
)]
# Calculate costs
Facility_Level_Results[, total_NOx_USD := total_NOx_tons * NOx]
Facility_Level_Results[, total_SO2_USD := total_SO2_tons * SO2]
Facility_Level_Results[, total_PM2.5_USD := PM2.5_tons * PM2.5]
Facility_Level_Results[, total_PM10_USD := PM10_tons * PM10]
Facility_Level_Results[, total_VOC_USD := VOC_tons * VOC]
Facility_Level_Results[, total_CO_USD := CO_tons * CO]
# Summarize data for Sim, Scenario, year
Yearly_Facility_Level_Results <- Facility_Level_Results[, .(
total_NOx_USD = sum(total_NOx_USD, na.rm = TRUE),
total_SO2_USD = sum(total_SO2_USD, na.rm = TRUE),
total_PM2.5_USD = sum(total_PM2.5_USD, na.rm = TRUE),
total_PM10_USD = sum(total_PM10_USD, na.rm = TRUE),
total_CO_USD = sum(total_CO_USD, na.rm = TRUE),
total_VOC_USD = sum(total_VOC_USD, na.rm = TRUE)
), by = .(Year, Simulation, Pathway)]
# Total air pollutants
Yearly_Facility_Level_Results[, total_air_emission_USD := total_NOx_USD + total_SO2_USD + total_PM2.5_USD +
total_PM10_USD + total_CO_USD + total_VOC_USD]
# Save the results
fwrite(Facility_Level_Results, file = file.path(output_path, "Facility_Level_Results_Existing.csv"), row.names = FALSE)
fwrite(Yearly_Facility_Level_Results, file = file.path(output_path, "Yearly_Facility_Level_Results_Existing.csv"), row.names = FALSE)
# Define a function to process Air_Pollutant Costs
process_Air_Pollutant <- function(sim, path, data) {
filtered_data <- data[Simulation == sim & Pathway == path]
npv <- calculate_npv(filtered_data, discount_rate, base_year, "total_air_emission_USD")
return(npv)
}
# NPV Calculation
simulations <- unique(Yearly_Facility_Level_Results$Simulation)
Pathways <- unique(Yearly_Facility_Level_Results$Pathway)
npv_results <- list()
for (sim in simulations) {
for (path in Pathways) {
npv <- process_Air_Pollutant(sim, path, Yearly_Facility_Level_Results)
npv_results[[paste0(sim, "_", path, "_Total_Air_Pollutant_NPV")]] <- npv
}
}
# Combine NPV results into a single data.table
combined_npvs <- rbindlist(lapply(names(npv_results), function(name) {
parts <- strsplit(name, "_")[[1]]
data.table(Simulation = parts[1], Pathway = parts[2], NPV = npv_results[[name]])
}), fill = TRUE)
combined_npvs <- combined_npvs[NPV != 0]
# Save combined NPV results to a single CSV file
fwrite(combined_npvs, file = file.path(output_path, "Air_Emissions_Existing.csv"), row.names = FALSE)
# Plots
Yearly_Facility_Level_Results_long <- melt(Yearly_Facility_Level_Results,
id.vars = c("Year", "Simulation", "Pathway"),
measure.vars = c("total_NOx_USD", "total_SO2_USD", "total_PM2.5_USD", "total_PM10_USD", "total_CO_USD", "total_VOC_USD", "total_air_emission_USD"),
variable.name = "Pollutant",
value.name = "Value")
setDT(Yearly_Facility_Level_Results_long)
# Convert costs to billions
Yearly_Facility_Level_Results_long[, Value := Value / 1e6]
# Plotting
ggplot(Yearly_Facility_Level_Results_long, aes(x = Year, y = Value, color = Pathway)) +
geom_line() +
facet_wrap(~ Pollutant, scales = "free_y") +
labs(title = "Temporal Evolution of Emissions by Pathway",
x = "Year",
y = "Emission Cost (mUSD)") +
theme_minimal()
# Avoided mortality for each Pathway
# Cost of mortality: $7.4 million in 2006-USD per avoided mortality
mortality_million_USD_2006 <- 7.4
# Extracting CPI values for specific years
cpi_2006 <- filter(cpi_data, year(date) == 2006) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2024$YearlyAvg / cpi_2006$YearlyAvg
# 2024 mortality cost
mortality_million_USD_2024 <- mortality_million_USD_2006 * conversion_rate
# How many moralities
combined_npvs$NPV_millions <- combined_npvs$NPV /1e6
combined_npvs$mortality <- combined_npvs$NPV_millions / mortality_million_USD_2024
# County level results
# Summarize data for Sim, Pathway, year and County
Yearly_County_Level_Results <- Facility_Level_Results[, .(
total_NOx_USD = sum(total_NOx_USD, na.rm = TRUE),
total_SO2_USD = sum(total_SO2_USD, na.rm = TRUE),
total_PM2.5_USD = sum(total_PM2.5_USD, na.rm = TRUE),
total_PM10_USD = sum(total_PM10_USD, na.rm = TRUE),
total_CO_USD = sum(total_CO_USD, na.rm = TRUE),
total_VOC_USD = sum(total_VOC_USD, na.rm = TRUE)
), by = .(Year, Simulation, Pathway, County, State)]
# Total air pollutants
Yearly_County_Level_Results[, total_air_emission_USD := total_NOx_USD + total_SO2_USD + total_PM2.5_USD +
total_PM10_USD + total_CO_USD + total_VOC_USD]
# Annual Mortality
Yearly_County_Level_Results[, mortality_annual_person := total_air_emission_USD/ mortality_million_USD_2024/ 1e6]
# Summarize the data by County, State, Simulation, and Pathway, and calculate NPV
Yearly_County_Level_Results[, Year := as.numeric(as.character(Year))]
County_Level_NPV <- Yearly_County_Level_Results[, .(
npv_NOx_USD = calculate_npv(.SD, discount_rate, base_year, "total_NOx_USD"),
npv_SO2_USD = calculate_npv(.SD, discount_rate, base_year, "total_SO2_USD"),
npv_PM2.5_USD = calculate_npv(.SD, discount_rate, base_year, "total_PM2.5_USD"),
npv_PM10_USD = calculate_npv(.SD, discount_rate, base_year, "total_PM10_USD"),
npv_CO_USD = calculate_npv(.SD, discount_rate, base_year, "total_CO_USD"),
npv_VOC_USD = calculate_npv(.SD, discount_rate, base_year, "total_VOC_USD"),
npv_total_air_emission_USD = calculate_npv(.SD, discount_rate, base_year, "total_air_emission_USD"),
mortality_person = sum(mortality_annual_person)
), by = .(County, State, Simulation, Pathway)]
# Save combined NPV results to a single CSV file
fwrite(County_Level_NPV, file = file.path(output_path, "Air_Emissions_County_Level_Existing.csv"), row.names = FALSE)
#------
## Cost of New Fossil Fuels Generation
# Annual Fossil_Fuels_NPC_new
Fossil_Fuels_NPC_new[, Facility_Unit.ID := NULL]
Fossil_Fuels_NPC_new[, Year := year(Commercial_Operation_Date)]
Fossil_Fuels_NPC_new <- Fossil_Fuels_NPC_new[!duplicated(Facility_ID)]
columns_to_multiply <- c("Estimated_NameplateCapacity_MW", "mean_Heat_Input_mmBtu")
Fossil_Fuels_NPC_new[, (columns_to_multiply) := lapply(.SD, function(x) x * 2), .SDcols = columns_to_multiply]
# Facility details (randomly assigned location)
Facilities_Data_filtered <- Air_Pollutant_Fuels_NPC[Primary_Fuel_Type == "Pipeline Natural Gas" & Unit_Type == "Combined cycle",]
set.seed(1) # For reproducibility
random_selection <- Facilities_Data_filtered[sample(1:nrow(Facilities_Data_filtered),
min(18, nrow(Facilities_Data_filtered))), ]
random_selection <- random_selection[, .(Facility_Unit.ID, Latitude, Longitude, State, County)]
Fossil_Fuels_NPC_new[, index := .I]
random_selection[, index := .I]
Fossil_Fuels_NPC_new <- merge(Fossil_Fuels_NPC_new, random_selection, by = "index", all.x = TRUE)
selected_cols <- Facility_Level_Results[, .(Facility_Unit.ID, PM_lbs_mmBTU, CO, NH3, PM2.5, NOx, SO2, VOC, PM10)]
selected_cols <- unique(selected_cols, by = "Facility_Unit.ID")
Fossil_Fuels_NPC_new <- merge(selected_cols, Fossil_Fuels_NPC_new, by = "Facility_Unit.ID")
# Add in parameters to generation
Yearly_Results <- merge(Yearly_Results, Fossil_Fuels_NPC_new, by = "Year", all.x = TRUE)
Yearly_Results <- Yearly_Results[New_Fossil_Fuel_TWh > 0, ]
# Calculate emissions and costs
# Calculate emissions and costs for Gas_CC facilities
Yearly_Results[, total_HI_mmBtu := New_Fossil_Fuel_TWh * 1e6 * mean_Heat_Input_mmBtu / Estimated_NameplateCapacity_MW]
Yearly_Results[, PM.total_tons := total_HI_mmBtu * PM_lbs_mmBTU * lbs_tons_conversion]
# Calculate PM2.5 and PM10 specifically for Gas_CC
Yearly_Results[, PM2.5_tons := PM.total_tons]
Yearly_Results[, PM10_tons := 0]
# NOx and SO2 emissions (convert lbs to tons)
Yearly_Results[, total_NOx_tons := New_Fossil_Fuel_TWh * 1e6 * mean_NOx_lbs_MW * lbs_tons_conversion]
Yearly_Results[, total_SO2_tons := New_Fossil_Fuel_TWh * 1e6 * mean_SO2_lbs_MW * lbs_tons_conversion]
# CO emissions for Gas_CC
Yearly_Results[, CO_tons := total_HI_mmBtu * 3.0e-02 * lbs_tons_conversion]  # Emission factor for Gas_CC
# VOC emissions for Gas_CC
Yearly_Results[, VOC_tons := total_HI_mmBtu * 2.1e-03 * lbs_tons_conversion]  # Emission factor for Gas_CC
# Calculate costs
Yearly_Results[, total_NOx_USD := total_NOx_tons * NOx]
Yearly_Results[, total_SO2_USD := total_SO2_tons * SO2]
Yearly_Results[, total_PM2.5_USD := PM2.5_tons * PM2.5]
Yearly_Results[, total_PM10_USD := PM10_tons * PM10]
Yearly_Results[, total_CO_USD := CO_tons * CO]
Yearly_Results[, total_VOC_USD := VOC_tons * VOC]
# Summarize data for Sim, Scenario, year
Yearly_Facility_Level_Results <- Yearly_Results[, .(
total_NOx_USD = sum(total_NOx_USD, na.rm = TRUE),
total_SO2_USD = sum(total_SO2_USD, na.rm = TRUE),
total_PM2.5_USD = sum(total_PM2.5_USD, na.rm = TRUE),
total_PM10_USD = sum(total_PM10_USD, na.rm = TRUE),
total_CO_USD = sum(total_CO_USD, na.rm = TRUE),
total_VOC_USD = sum(total_VOC_USD, na.rm = TRUE)
), by = .(Year, Simulation, Pathway)]
# Total air pollutants
Yearly_Facility_Level_Results[, total_air_emission_USD := total_NOx_USD + total_SO2_USD + total_PM2.5_USD +
total_PM10_USD + total_CO_USD + total_VOC_USD]
# Adjust County names
Yearly_Results$County <- gsub(" County", "", Yearly_Results$County)
Yearly_Facility_Level_Results$County <- gsub(" County", "", Yearly_Facility_Level_Results$County)
# Save the results
fwrite(Yearly_Results, file = file.path(output_path, "Facility_Level_Results_New.csv"), row.names = FALSE)
fwrite(Yearly_Facility_Level_Results, file = file.path(output_path, "Yearly_Facility_Level_Results_New.csv"), row.names = FALSE)
# Define a function to process Air_Pollutant Costs
process_Air_Pollutant <- function(sim, path, data) {
filtered_data <- data[Simulation == sim & Pathway == path]
npv <- calculate_npv(filtered_data, discount_rate, base_year, "total_air_emission_USD")
return(npv)
}
# NPV Calculation
simulations <- unique(Yearly_Facility_Level_Results$Simulation)
Pathways <- unique(Yearly_Facility_Level_Results$Pathway)
npv_results <- list()
for (sim in simulations) {
for (path in Pathways) {
npv <- process_Air_Pollutant(sim, path, Yearly_Facility_Level_Results)
npv_results[[paste0(sim, "_", path, "_Total_Air_Pollutant_NPV")]] <- npv
}
}
# Combine NPV results into a single data.table
combined_npvs_new <- rbindlist(lapply(names(npv_results), function(name) {
parts <- strsplit(name, "_")[[1]]
data.table(Simulation = parts[1], Pathway = parts[2], NPV = npv_results[[name]])
}), fill = TRUE)
# Save combined NPV results to a single CSV file
fwrite(combined_npvs_new, file = file.path(output_path, "Air_Emissions_New.csv"), row.names = FALSE)
# Avoided mortality for each Pathway
# Cost of mortality: $7.4 million in 2006-USD per avoided mortality
mortality_million_USD_2006 <- 7.4
# Extracting CPI values for specific years
cpi_2006 <- filter(cpi_data, year(date) == 2006) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2024$YearlyAvg / cpi_2006$YearlyAvg
# 2024 mortality cost
mortality_million_USD_2024 <- mortality_million_USD_2006 * conversion_rate
# How many moralities
combined_npvs_new$NPV_millions <- combined_npvs_new$NPV /1e6
combined_npvs_new$mortality <- combined_npvs_new$NPV_millions / mortality_million_USD_2024
# County level results
# Summarize data for Sim, Pathway, year and County
Yearly_County_Level_Results <- Yearly_Results[, .(
total_NOx_USD = sum(total_NOx_USD, na.rm = TRUE),
total_SO2_USD = sum(total_SO2_USD, na.rm = TRUE),
total_PM2.5_USD = sum(total_PM2.5_USD, na.rm = TRUE),
total_PM10_USD = sum(total_PM10_USD, na.rm = TRUE),
total_CO_USD = sum(total_CO_USD, na.rm = TRUE),
total_VOC_USD = sum(total_VOC_USD, na.rm = TRUE)
), by = .(Year, Simulation, Pathway, County, State)]
# Total air pollutants
Yearly_County_Level_Results[, total_air_emission_USD := total_NOx_USD + total_SO2_USD + total_PM2.5_USD +
total_PM10_USD + total_CO_USD + total_VOC_USD]
# Annual Mortality
Yearly_County_Level_Results[, mortality_annual_person := total_air_emission_USD/ mortality_million_USD_2024/ 1e6]
# Summarize the data by County, State, Simulation, and Pathway, and calculate NPV
Yearly_County_Level_Results[, Year := as.numeric(as.character(Year))]
County_Level_NPV <- Yearly_County_Level_Results[, .(
npv_NOx_USD = calculate_npv(.SD, discount_rate, base_year, "total_NOx_USD"),
npv_SO2_USD = calculate_npv(.SD, discount_rate, base_year, "total_SO2_USD"),
npv_PM2.5_USD = calculate_npv(.SD, discount_rate, base_year, "total_PM2.5_USD"),
npv_PM10_USD = calculate_npv(.SD, discount_rate, base_year, "total_PM10_USD"),
npv_CO_USD = calculate_npv(.SD, discount_rate, base_year, "total_CO_USD"),
npv_VOC_USD = calculate_npv(.SD, discount_rate, base_year, "total_VOC_USD"),
npv_total_air_emission_USD = calculate_npv(.SD, discount_rate, base_year, "total_air_emission_USD"),
mortality_person = sum(mortality_annual_person)
), by = .(County, State, Simulation, Pathway)]
# Save combined NPV results to a single CSV file
fwrite(County_Level_NPV, file = file.path(output_path, "Air_Emissions_County_Level_New.csv"), row.names = FALSE)
## Total NPVs
# Assuming combined_npvs and combined_npvs_new are already data.tables
# Remove zeros from both datasets
combined_npvs_filtered <- combined_npvs[NPV > 0,]
combined_npvs_new_filtered <- combined_npvs_new[NPV > 0,]
# Calculate the mean for each pathway in combined_npvs (in billions $)
mean_npvs_1 <- combined_npvs_filtered[, .(
NPV_mean_1 = mean(NPV, na.rm = TRUE),
NPV_max_1 = max(NPV, na.rm = TRUE),
NPV_min_1 = min(NPV, na.rm = TRUE),
mortality_mean_1 = mean(mortality, na.rm = TRUE),
mortality_max_1 = max(mortality, na.rm = TRUE),
mortality_min_1 = min(mortality, na.rm = TRUE)
), by = Pathway]
# Calculate the mean for each pathway in combined_npvs_new (in billions $)
mean_npvs_2 <- combined_npvs_new_filtered[, .(
NPV_mean_2 = mean(NPV, na.rm = TRUE),
NPV_max_2 = max(NPV, na.rm = TRUE),
NPV_min_2 = min(NPV, na.rm = TRUE),
mortality_mean_2 = mean(mortality, na.rm = TRUE),
mortality_max_2 = max(mortality, na.rm = TRUE),
mortality_min_2 = min(mortality, na.rm = TRUE)
), by = Pathway]
# Combine the pathway means
combined_pathway_means <- merge(mean_npvs_1, mean_npvs_2, by = "Pathway", all = TRUE)
# Calculate the sum of the means for each pathway
summary_npvs <- combined_pathway_means[, .(
mean_NPV = sum(c(NPV_mean_1, NPV_mean_2), na.rm = TRUE),
max_NPV = sum(c(NPV_max_1, NPV_max_2), na.rm = TRUE),
min_NPV = sum(c(NPV_min_1, NPV_min_2), na.rm = TRUE),
mean_mortality = sum(c(mortality_mean_1, mortality_mean_2), na.rm = TRUE),
max_mortality = sum(c(mortality_max_1, mortality_max_2), na.rm = TRUE),
min_mortality = sum(c(mortality_min_1, mortality_min_2), na.rm = TRUE)
), by = Pathway]
fwrite(summary_npvs, file = file.path(output_path, "Air_Emissions_ALL.csv"), row.names = FALSE)
# Load necessary library
library(data.table)
# Define paths and parameters
original_R_file <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 ARC Codes/2 Dispatch Curve.R" # Full path to the original R file
output_folder <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 RCodes to submit/1 Comp Days" # Full path to the folder where new files will be saved
n_sim <- 75  # Number of iterations batches n_sim*10 = total sims
# Loop to generate R and Bash files for each pathway and iteration,
# with 'i' taking values 10, 20, ..., 200.
for (i in seq(1, n_sim * 10, by = 10)) {
# ----- Modify R File -----
# Read the original R file
content <- readLines(original_R_file)
# Modify the variable for iteration and pathway_id
content <- gsub(
pattern = paste0("sim_start <- .*"),
replacement = paste0("sim_start <- ", i),
x = content
)
# Save the modified R file with pathway-specific and iteration-specific naming
new_r_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".R"))
writeLines(content, new_r_file)
# ----- Generate Bash Script -----
# Define bash script content
bash_script <- paste0("#!/bin/bash
#SBATCH --account=epadecarb
#SBATCH --partition=preemptable_q
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=80
#SBATCH --cpus-per-task=1  # Reduce the number of cores to avoid OOM
#SBATCH --time=24:00:00    # Set a more appropriate time limit
module load containers/singularity
singularity exec --bind /projects /projects/arcsingularity/ood-rstudio141717-basic_4.1.0.sif Rscript \"/projects/epadecarb/2 Generation Expansion Model/2 R Codes/1 Comp Days/Dispatch_Curve", "_iteration_", i, ".R\"
module reset")
# Save the bash script with pathway-specific and iteration-specific naming
bash_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".sh"))
writeLines(bash_script, bash_file)
}
# Load necessary library
library(data.table)
# Define paths and parameters
original_R_file <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 ARC Codes/2 Dispatch Curve.R" # Full path to the original R file
output_folder <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 RCodes to submit/1 Comp Days" # Full path to the folder where new files will be saved
n_sim <- 100  # Number of iterations batches n_sim*10 = total sims
# Loop to generate R and Bash files for each pathway and iteration,
# with 'i' taking values 10, 20, ..., 200.
for (i in seq(1, n_sim * 10, by = 10)) {
# ----- Modify R File -----
# Read the original R file
content <- readLines(original_R_file)
# Modify the variable for iteration and pathway_id
content <- gsub(
pattern = paste0("sim_start <- .*"),
replacement = paste0("sim_start <- ", i),
x = content
)
# Save the modified R file with pathway-specific and iteration-specific naming
new_r_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".R"))
writeLines(content, new_r_file)
# ----- Generate Bash Script -----
# Define bash script content
bash_script <- paste0("#!/bin/bash
#SBATCH --account=epadecarb
#SBATCH --partition=normal_q
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=80
#SBATCH --cpus-per-task=1  # Reduce the number of cores to avoid OOM
#SBATCH --time=24:00:00    # Set a more appropriate time limit
module load containers/singularity
singularity exec --bind /projects /projects/arcsingularity/ood-rstudio141717-basic_4.1.0.sif Rscript \"/projects/epadecarb/2 Generation Expansion Model/2 R Codes/1 Comp Days/Dispatch_Curve", "_iteration_", i, ".R\"
module reset")
# Save the bash script with pathway-specific and iteration-specific naming
bash_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".sh"))
writeLines(bash_script, bash_file)
}
# Load necessary library
library(data.table)
# Define paths and parameters
original_R_file <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 ARC Codes/2 Dispatch Curve.R" # Full path to the original R file
output_folder <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 RCodes to submit/1 Comp Days" # Full path to the folder where new files will be saved
n_sim <- 110  # Number of iterations batches n_sim*10 = total sims
# Loop to generate R and Bash files for each pathway and iteration,
# with 'i' taking values 10, 20, ..., 200.
for (i in seq(1, n_sim * 10, by = 10)) {
# ----- Modify R File -----
# Read the original R file
content <- readLines(original_R_file)
# Modify the variable for iteration and pathway_id
content <- gsub(
pattern = paste0("sim_start <- .*"),
replacement = paste0("sim_start <- ", i),
x = content
)
# Save the modified R file with pathway-specific and iteration-specific naming
new_r_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".R"))
writeLines(content, new_r_file)
# ----- Generate Bash Script -----
# Define bash script content
bash_script <- paste0("#!/bin/bash
#SBATCH --account=epadecarb
#SBATCH --partition=normal_q
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=80
#SBATCH --cpus-per-task=1  # Reduce the number of cores to avoid OOM
#SBATCH --time=24:00:00    # Set a more appropriate time limit
module load containers/singularity
singularity exec --bind /projects /projects/arcsingularity/ood-rstudio141717-basic_4.1.0.sif Rscript \"/projects/epadecarb/2 Generation Expansion Model/2 R Codes/1 Comp Days/Dispatch_Curve", "_iteration_", i, ".R\"
module reset")
# Save the bash script with pathway-specific and iteration-specific naming
bash_file <- file.path(output_folder, paste0("Dispatch_Curve", "_iteration_", i, ".sh"))
writeLines(bash_script, bash_file)
}
# Install/Import SSH library
library(ssh)
setwd("/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing")
host <- "tinkercliffs2.arc.vt.edu"
username <- "amirgazar" # VT PID
password <- "V?i7Bj!-a3AEZHP"  # VT.edu Password
session <- ssh::ssh_connect(paste0(username, "@", host), passwd = password) # Make sure you authenticate DUO Security
#---- Batch processing
# Uploading Rcode
Rcode_folder <- "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/2 Advanced Research Computing/1 RCodes to submit/1 Comp Days" # Path to local folder containing R files
remote_folder <- "/projects/epadecarb/2 Generation Expansion Model/2 R Codes/1 Comp Days/" # Remote folder path
r_files <- list.files(Rcode_folder, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
ssh::scp_upload(session, r_file, to = remote_folder)
}
# Load bash script
# Get list of Bash files in the folder
bash_files <- list.files(Rcode_folder, pattern = "\\.sh$", full.names = TRUE)
# Loop through each Bash file
for (bash_file in bash_files) {
# Get the base name of the Bash file
bash_file_name <- basename(bash_file)
ssh::scp_upload(session, bash_file, to = remote_folder)
# Execute the uploaded Bash script on the remote server
commands <- paste0('cd "', remote_folder, '" && sbatch -A epadecarb ', bash_file_name)
ssh::ssh_exec_wait(session, command = commands)
}
# Disconnect
#-----
ssh::ssh_disconnect(session)
