mutate(datetime = as.POSIXct(Date) + hours(Hour - 1))
# Example 1: Simple time series of Demand
ggplot(df, aes(x = datetime, y = Demand)) +
geom_line() +
labs(
title = "Hourly Demand (MW) over Time",
x     = "Date",
y     = "Demand (MW)"
)
# Example 2: Stacked area of generation mix
# pick the columns you want to include in the stack
supply_cols <- c(
"Nuclear_MW", "Hydropower_MW", "Biomass_MW", "Solar_MW",
"Onshore_Wind_MW", "Offshore_Wind_MW", "SMR_MW", "New_NG_MW",
"Imports_HQ_MW", "Imports_NBSO_MW", "Imports_NYISO_MW", "Storage_MW"
)
df_long <- df %>%
select(datetime, all_of(supply_cols)) %>%
pivot_longer(
cols      = -datetime,
names_to  = "Source",
values_to = "MW"
)
annual_summary <- combined_final_hourly_results %>%
group_by(Year) %>%
summarise(
Wilder_MWh    = sum(Wilder_MWh, na.rm = TRUE),
Clean_MWh     = sum(Clean_MWh, na.rm = TRUE),
Fossil_MWh    = sum(New_Fossil_Fuel_MWh + Old_Fossil_Fuels_net_MWh,
na.rm = TRUE)
) %>%
ungroup()
# take a peek
print(annual_summary)
View(annual_summary)
annual_summary <- combined_final_hourly_results %>%
group_by(Year, Scenario, Pathway) %>%
summarise(
Wilder_MWh    = sum(Wilder_MWh, na.rm = TRUE),
Clean_MWh     = sum(Clean_MWh, na.rm = TRUE),
Fossil_MWh    = sum(New_Fossil_Fuel_MWh + Old_Fossil_Fuels_net_MWh,
na.rm = TRUE)
) %>%
ungroup()
# take a peek
print(annual_summary)
View(annual_summary)
View(Wilder_CF)
plot(Wilder_CF$CF)
head(Wilder_CF)
library(data.table)
library(ggplot2)
# compute mean CF by scenario
mean_CF <- Wilder_CF[, .(mean_CF = mean(CF, na.rm = TRUE)), by = Scenario]
# bar‐plot of mean CF for each scenario
ggplot(mean_CF, aes(x = Scenario, y = mean_CF)) +
geom_col() +
labs(
title    = "Mean Capacity Factor by Scenario",
x        = "Scenario",
y        = "Mean CF"
) +
theme_minimal()
## 2. Probabilistic Generation Data and Capacity Factors
# 2.0 Wilder Dam
file_path <- "/Users/amirgazar/Documents/GitHub/Wilder Dam/Wilder Dam hydropeaking scenarios/Wilder_dam.csv"
Wilder_CF <- fread(file_path)
library(data.table)
library(ggplot2)
# compute mean CF by scenario
mean_CF <- Wilder_CF[, .(mean_CF = mean(CF, na.rm = TRUE)), by = Scenario]
# bar‐plot of mean CF for each scenario
ggplot(mean_CF, aes(x = Scenario, y = mean_CF)) +
geom_col() +
labs(
title    = "Mean Capacity Factor by Scenario",
x        = "Scenario",
y        = "Mean CF"
) +
theme_minimal()
ggplot(Wilder_CF, aes(x = Scenario, y = CF)) +
geom_boxplot() +
labs(
title    = "CF Distribution by Scenario",
x        = "Scenario",
y        = "CF"
) +
theme_minimal()
head(combined_final_hourly_results)
head(combined_final_hourly_results)
library(data.table)
library(ggplot2)
# assume your DT is named combined_final_hourly_results
# 1) Mean Wilder_MWh by scenario
mean_wilder <- combined_final_hourly_results[
, .(mean_Wilder_MWh = mean(Wilder_MWh, na.rm = TRUE))
, by = Scenario
]
ggplot(mean_wilder, aes(x = Scenario, y = mean_Wilder_MWh)) +
geom_col() +
labs(
title = "Mean Hourly Wilder MWh by Scenario",
x     = "Scenario",
y     = "Mean Wilder MWh"
) +
theme_minimal()
# ——— OR ———
# 2) Total annual Wilder_MWh by scenario
total_wilder <- combined_final_hourly_results[
, .(total_Wilder_MWh = sum(Wilder_MWh, na.rm = TRUE))
, by = Scenario
]
ggplot(total_wilder, aes(x = Scenario, y = total_Wilder_MWh)) +
geom_col() +
labs(
title = "Total Annual Wilder MWh by Scenario",
x     = "Scenario",
y     = "Total Wilder MWh"
) +
theme_minimal()
library(data.table)
library(ggplot2)
# if not already a data.table:
setDT(combined_final_hourly_results)
# basic boxplot
ggplot(combined_final_hourly_results, aes(x = Scenario, y = Wilder_MWh)) +
geom_boxplot(outlier.shape = 16,              # show outliers as points
outlier.size  = 1.5,             # size of outlier points
notch         = FALSE) +         # notch = TRUE draws a confidence notch
labs(
title = "Distribution of Hourly Wilder MWh by Scenario",
x     = "Scenario",
y     = "Hourly Wilder MWh"
) +
theme_minimal()
ggplot(combined_final_hourly_results, aes(x = Scenario, y = Wilder_MWh, fill = Scenario)) +
geom_boxplot(outlier.shape = 16, outlier.size = 1.2) +
labs(
title = "Wilder MWh Distribution by Scenario",
x     = "Scenario",
y     = "Hourly Wilder MWh"
) +
theme_minimal() +
theme(legend.position = "none")
library(data.table)
library(ggplot2)
# make sure you’ve converted Date to a Date or IDate
setDT(combined_final_hourly_results)
combined_final_hourly_results[, Date := as.IDate(Date)]
# filter to the first week of July, 2045
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-07")
]
# boxplot of hourly Wilder_MWh across scenarios for that week
ggplot(july_week, aes(x = Scenario, y = Wilder_MWh, fill = Scenario)) +
geom_boxplot(outlier.shape = 16, outlier.size = 1.2, notch = TRUE) +
labs(
title = "Hourly Wilder MWh Distribution\nJuly 1–7, 2045",
x     = "Scenario",
y     = "Wilder MWh"
) +
theme_minimal() +
theme(legend.position = "none")
wilder_scenarios
# 2.0 Wilder Dam
file_path <- "/Users/amirgazar/Documents/GitHub/Wilder Dam/Wilder Dam hydropeaking scenarios/Wilder_dam.csv"
Wilder_CF <- fread(file_path)
setkey(Wilder_CF, DayLabel, Hour, Scenario)
## ----- 2. Functions ------
# FUNCTION: Applies Dispatch Curve
dispatch_curve <- function(sim, pathway, wilder_scen) {
#  ------
# STEP 1: Filter and Merge Data
#  ------
# Filter capacity data for the chosen pathway (years ≥2025) and merge with demand data.
cap_data <- Hourly_Installed_Capacity[Pathway == pathway & Year >= 2025]
dispatch_data <- merge(Demand_data, cap_data, by = c("Date", "Hour"))
dispatch_data[, Simulation := sim]
setorder(dispatch_data, Date, Hour)
#  ------
# STEP 2: Extract Random Percentile Indices
#  ------
# Retrieve random vector and compute indices for each asset.
random_vector <- Random_sequence[[sim]]
n_random <- length(random_vector)
n_hours <- nrow(dispatch_data)
n_total_rand <- 6
base_indices <- ((0:(n_hours - 1)) * n_total_rand)
idx_solar    <- (base_indices + 0) %% n_random + 1
idx_onshore  <- (base_indices + 1) %% n_random + 1
idx_offshore <- (base_indices + 2) %% n_random + 1
idx_impHQ    <- (base_indices + 3) %% n_random + 1   # For Quebec (HQ) imports
idx_impNYISO <- (base_indices + 4) %% n_random + 1
idx_impNBSO  <- (base_indices + 5) %% n_random + 1
idx_wilder  <- (base_indices + 6) %% n_random + 1 # Wilder dam
dispatch_data[, Percentile_Solar    := random_vector[idx_solar]]
dispatch_data[, Percentile_Onshore  := random_vector[idx_onshore]]
dispatch_data[, Percentile_Offshore := random_vector[idx_offshore]]
dispatch_data[, Percentile_ImpHQ    := random_vector[idx_impHQ]]
dispatch_data[, Percentile_ImpNYISO := random_vector[idx_impNYISO]]
dispatch_data[, Percentile_ImpNBSO  := random_vector[idx_impNBSO]]
dispatch_data[, Percentile_Wilder  := random_vector[idx_wilder]]
#  ------
# STEP 3: Lookup Capacity Factor (CF) Values
#  ------
# Merge CF data for Solar.
dispatch_data <- merge(dispatch_data,
Solar_CF[, .(DayLabel, Hour, Percentile, CF)],
by.x = c("DayLabel", "Hour", "Percentile_Solar"),
by.y = c("DayLabel", "Hour", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "CF", "Solar_CF")
# Merge CF data for Onshore Wind.
dispatch_data <- merge(dispatch_data,
Onwind_CF[, .(DayLabel, Hour, Percentile, CF)],
by.x = c("DayLabel", "Hour", "Percentile_Onshore"),
by.y = c("DayLabel", "Hour", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "CF", "Onshore_CF")
# Merge CF data for Offshore Wind.
dispatch_data <- merge(dispatch_data,
Offwind_CF[, .(DayLabel, Hour, Percentile, CF)],
by.x = c("DayLabel", "Hour", "Percentile_Offshore"),
by.y = c("DayLabel", "Hour", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "CF", "Offshore_CF")
# Merge CF data for Quebec (HQ) imports.
dispatch_data <- merge(dispatch_data,
Imports_CF[, .(DayLabel, Percentile, imports_QC)],
by.x = c("DayLabel", "Percentile_ImpHQ"),
by.y = c("DayLabel", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "imports_QC", "Import_HQ_CF")
# Merge CF data for NYISO imports.
dispatch_data <- merge(dispatch_data,
Imports_CF[, .(DayLabel, Percentile, imports_NYISO)],
by.x = c("DayLabel", "Percentile_ImpNYISO"),
by.y = c("DayLabel", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "imports_NYISO", "Import_NYISO_CF")
# Merge CF data for NBSO imports.
dispatch_data <- merge(dispatch_data,
Imports_CF[, .(DayLabel, Percentile, imports_NBSO)],
by.x = c("DayLabel", "Percentile_ImpNBSO"),
by.y = c("DayLabel", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "imports_NBSO", "Import_NBSO_CF")
# Merge CF data for Wilder Dam.
wilder_CF_scen <- Wilder_CF[, Scenario := wilder_scen]
dispatch_data <- merge(dispatch_data,
wilder_CF_scen[, .(DayLabel, Hour, Percentile, CF)],
by.x = c("DayLabel", "Hour", "Percentile_Wilder"),
by.y = c("DayLabel", "Hour", "Percentile"),
all.x = TRUE)
setnames(dispatch_data, "CF", "Wilder_CF")
#  ------
# STEP 4: Calculate Clean Generation
#  ------
# Compute generation for variable renewables (in MWh).
dispatch_data[, Solar_MWh    := Solar_MW * Solar_CF]
dispatch_data[, Onshore_MWh  := Onshore_Wind_MW * Onshore_CF]
dispatch_data[, Offshore_MWh := Offshore_Wind_MW * Offshore_CF]
# Compute generation for baseload assets using fixed CF values.
nuclear_CF <- as.numeric(CleanBaseload_Facility_Data[technology == "Nuclear", value])
hydro_CF   <- as.numeric(CleanBaseload_Facility_Data[technology == "Hydropower", value])
bio_CF     <- as.numeric(CleanBaseload_Facility_Data[technology == "Biopower", value])
dispatch_data[, Nuclear_MWh := Nuclear_MW * nuclear_CF]
dispatch_data[, Hydro_MWh   := Hydropower_MW * hydro_CF]
dispatch_data[, Biomass_MWh := Biomass_MW * bio_CF]
# Wilder dam
Wilder_dam_NPC <- 41 # MW
dispatch_data[, Wilder_MWh := Wilder_dam_NPC * Wilder_CF]
# Compute generation from SMRs.
SMR_CF <- SMR_Facility_Data$CF
dispatch_data[, SMR_MWh := SMR_MW * SMR_CF]
# Sum all clean generation.
dispatch_data[, Clean_MWh := Solar_MWh + Onshore_MWh + Offshore_MWh +
Nuclear_MWh + Hydro_MWh + Biomass_MWh + SMR_MWh + Wilder_MWh]
setorder(dispatch_data, Date, Hour)
#  ------
# STEP 5: Battery Storage Integration
#  ------
# Calculate net energy (clean generation minus demand) for battery operations.
storage_status_initial <- 0
rt_eff <- 0.85          # Round-trip efficiency
eta <- sqrt(rt_eff)     # Charging/discharging efficiency
dispatch_data[, net_energy := Clean_MWh - Demand]
dispatch_data[, battery_power_limit := Storage_MW / 8]
dispatch_data[, net_energy := pmin(pmax(net_energy, -battery_power_limit), battery_power_limit)]
# Compute storage state hour-by-hour.
storage_status_vec <- Reduce(
function(prev, i) {
net <- dispatch_data$net_energy[i]
capacity <- dispatch_data$Storage_MW[i]
new_storage <- if (net >= 0) prev + net * eta else prev + net / eta
min(max(new_storage, 0), capacity)
},
seq_len(nrow(dispatch_data)),
init = storage_status_initial,
accumulate = TRUE
)[-1]
dispatch_data[, Storage_status := storage_status_vec]
dispatch_data[, Battery_flow := c(0, diff(Storage_status))]
dispatch_data[, Battery_charge := ifelse(Battery_flow > 0, Battery_flow, 0)]
dispatch_data[, Battery_discharge := ifelse(Battery_flow < 0, -Battery_flow, 0)]
#  ------
# STEP 6: Fossil Fuel Generation Requirements
#  ------
# Compute generation from new fossil fuels.
New_Fossil_Fuels_NPC <- New_Fossil_Fuels_NPC[1]
NFF_CF <- New_Fossil_Fuels_NPC$CF
dispatch_data[, New_Fossil_Fuel_MWh := New_NG_MW * NFF_CF]
# Merge maximum hourly capacity for old fossil fuels.
if (pathway %in% c("A", "D")) {
dispatch_data <- merge(dispatch_data,
Fossil_Fuels_hr_maxmin[, .(Date, Hour, Old_Fossil_Fuels_hr_max_MWh = max_gen_hr_no_retirement_MW)],
by = c("Date", "Hour"), all.x = TRUE)
} else {
dispatch_data <- merge(dispatch_data,
Fossil_Fuels_hr_maxmin[, .(Date, Hour, Old_Fossil_Fuels_hr_max_MWh = max_gen_hr_retirement_MW)],
by = c("Date", "Hour"), all.x = TRUE)
}
#  ------
# STEP 7: Import Generation and Splitting QC Imports
#  ------
# Calculate total import generation (in MWh) for each source.
dispatch_data[, Spot_Market_Imports_HQ_MWh := Spot_Market_Imports_HQ_MW * Import_HQ_CF]
dispatch_data[, Import_NYISO_MWh    := Imports_NYISO_MW * Import_NYISO_CF]
dispatch_data[, Import_NBSO_MWh     := Imports_NBSO_MW * Import_NBSO_CF]
#  long-term.
imports_max_CF <- 0.95
dispatch_data[, Long_Term_Imports_HQ_MWh := Long_Term_Imports_HQ_MW * imports_max_CF]
# Sum total imports
dispatch_data[, Total_import_MWh := Long_Term_Imports_HQ_MWh + Spot_Market_Imports_HQ_MWh + Import_NYISO_MWh + Import_NBSO_MWh]
dispatch_data[, Total_import_max_MWh := (Imports_NBSO_MW + Imports_NYISO_MW + Imports_HQ_MW) * imports_max_CF]
#  ------
# STEP 8: Fossil Generation and Shortage Calculation (Posterior Distribution)
#  ------
# Compute fossil generation needed to cover remaining demand.
dispatch_data[, Fossil_required_MWh := pmax(Demand - Clean_MWh - Total_import_MWh - Battery_discharge, 0)]
dispatch_data[, Old_Fossil_Fuels_net_MWh := pmin(Old_Fossil_Fuels_hr_max_MWh, Fossil_required_MWh)]
dispatch_data[, Shortage_MWh := round(pmax(Demand - (Clean_MWh + Battery_discharge +
Total_import_MWh + Old_Fossil_Fuels_net_MWh + New_Fossil_Fuel_MWh), 0), 2)]
# Resample imports if a shortage exists.
dispatch_data[, Total_import_net_MWh := ifelse(
Shortage_MWh > 0,
Total_import_MWh + pmin(Shortage_MWh, Total_import_max_MWh - Total_import_MWh),
pmax(0, pmin(Total_import_MWh, Demand - (Clean_MWh + Battery_discharge + Old_Fossil_Fuels_net_MWh + New_Fossil_Fuel_MWh)))
)]
# Recalculate shortage.
dispatch_data[, Shortage_MWh := round(pmax(
Demand - (Clean_MWh + Battery_discharge + Total_import_net_MWh + Old_Fossil_Fuels_net_MWh + New_Fossil_Fuel_MWh),
0
), 2)]
# Calculate Curtailments rounded to 2 decimal points
dispatch_data[, Curtailments_MWh := round(
pmax(0, (Clean_MWh + Battery_discharge + Old_Fossil_Fuels_net_MWh + New_Fossil_Fuel_MWh + Total_import_net_MWh) - Demand - Battery_charge),
2
)]
#  ------
# STEP 9: Adjust columns
#  ------
# Remove temporary columns.
dispatch_data[, c("net_energy", "Percentile_ImpNBSO", "Percentile_ImpNYISO",
"Percentile_ImpHQ", "Percentile_Offshore", "Percentile_Onshore", "Percentile_Solar",
"Fossil_required_MWh") := NULL]
gc()
return(dispatch_data)
}
## ----- 3. Run the simulations ------
# Set all pathways from Hourly_Installed_Capacity$Pathway
pathways <- unique(Hourly_Installed_Capacity$Pathway)
pathways<- "B1"
n_simulations <- 1
wilder_scenarios <- unique(Wilder_CF$Scenario)
simulation_results <- lapply(seq_len(n_simulations), function(sim) {
cat("Running simulation:", sim, "\n")
# For each pathway…
pathway_results <- lapply(pathways, function(pathway) {
cat("  Processing pathway:", pathway, "\n")
# …for each scenario
scenario_results <- lapply(wilder_scenarios, function(scenario) {
cat("    Processing scenario:", scenario, "\n")
# call your dispatch_curve with the three inputs
final_hourly <- dispatch_curve(sim, pathway, scenario)
# tag the data
final_hourly$Simulation <- sim
final_hourly$Pathway     <- pathway
final_hourly$Scenario    <- scenario
# return as a named list element
list(final_hourly = final_hourly)
})
# name the list elements by scenario for clarity
names(scenario_results) <- wilder_scenarios
scenario_results
})
# name the list elements by pathway
names(pathway_results) <- pathways
pathway_results
})
combined_final_hourly_results <-
do.call(rbind, lapply(simulation_results, function(sim) do.call(rbind, lapply(sim, function(path) do.call(rbind, lapply(path, function(x) x$final_hourly))))))
library(data.table)
library(ggplot2)
# if not already a data.table:
setDT(combined_final_hourly_results)
# basic boxplot
ggplot(combined_final_hourly_results, aes(x = Scenario, y = Wilder_MWh)) +
geom_boxplot(outlier.shape = 16,              # show outliers as points
outlier.size  = 1.5,             # size of outlier points
notch         = FALSE) +         # notch = TRUE draws a confidence notch
labs(
title = "Distribution of Hourly Wilder MWh by Scenario",
x     = "Scenario",
y     = "Hourly Wilder MWh"
) +
theme_minimal()
library(data.table)
library(ggplot2)
# make sure you’ve converted Date to a Date or IDate
setDT(combined_final_hourly_results)
combined_final_hourly_results[, Date := as.IDate(Date)]
# filter to the first week of July, 2045
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-07")
]
# boxplot of hourly Wilder_MWh across scenarios for that week
ggplot(july_week, aes(x = Scenario, y = Wilder_MWh, fill = Scenario)) +
geom_boxplot(outlier.shape = 16, outlier.size = 1.2, notch = TRUE) +
labs(
title = "Hourly Wilder MWh Distribution\nJuly 1–7, 2045",
x     = "Scenario",
y     = "Wilder MWh"
) +
theme_minimal() +
theme(legend.position = "none")
View(july_week)
library(data.table)
library(ggplot2)
# make sure you’ve converted Date to a Date or IDate
setDT(combined_final_hourly_results)
combined_final_hourly_results[, Date := as.IDate(Date)]
# filter to the first week of July, 2045
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-02")
]
# boxplot of hourly Wilder_MWh across scenarios for that week
ggplot(july_week, aes(x = Scenario, y = Wilder_MWh, fill = Scenario)) +
geom_boxplot(outlier.shape = 16, outlier.size = 1.2, notch = TRUE) +
labs(
title = "Hourly Wilder MWh Distribution\nJuly 1–7, 2045",
x     = "Scenario",
y     = "Wilder MWh"
) +
theme_minimal() +
theme(legend.position = "none")
library(data.table)
library(ggplot2)
# make sure you’ve converted Date to a Date or IDate
setDT(combined_final_hourly_results)
combined_final_hourly_results[, Date := as.IDate(Date)]
# filter to the first week of July, 2045
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-01")
]
# boxplot of hourly Wilder_MWh across scenarios for that week
ggplot(july_week, aes(x = Scenario, y = Wilder_MWh, fill = Scenario)) +
geom_boxplot(outlier.shape = 16, outlier.size = 1.2, notch = TRUE) +
labs(
title = "Hourly Wilder MWh Distribution\nJuly 1–7, 2045",
x     = "Scenario",
y     = "Wilder MWh"
) +
theme_minimal() +
theme(legend.position = "none")
plot(july_week$Wilder_MWh)
july_week <- july_week[, .(mean_mwh = mean(Wilder_MWh, na.rm = TRUE)), by = Scenario]
july_week <- july_week[, .(sum_mwh = sum(Wilder_MWh, na.rm = TRUE)), by = Scenario]
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-07")
]
july_week <- july_week[, .(sum_mwh = sum(Wilder_MWh, na.rm = TRUE)), by = Scenario]
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-07-01") &
Date <= as.IDate("2045-07-07")
]
july_week <- july_week[, .(sum_mwh = sum(Wilder_CF, na.rm = TRUE)), by = Scenario]
july_week <- combined_final_hourly_results[
Year == 2045 &
Date >= as.IDate("2045-12-01") &
Date <= as.IDate("2045-12-07")
]
sum <- july_week[, .(sum_mwh = sum(Wilder_MWh, na.rm = TRUE)), by = Scenario]
View(sum)
plot(july_week$Wilder_MWh)
sum <- combined_final_hourly_results[, .(sum_mwh = sum(Wilder_MWh, na.rm = TRUE)), by = Scenario]
hydro_CF
## ----- 4. Save results to CSV files ------
write.csv(combined_final_hourly_results, "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/1 Test Results/Hourly_Results_NE.csv", row.names = FALSE)
## ----- 4. Save results to CSV files ------
write.csv(combined_final_hourly_results, "/Users/amirgazar/Documents/GitHub/Decarbonization-Tradeoffs/2 Generation Expansion Model/5 Dispatch Curve/1 Test Results/Hourly_Results_NE.csv", row.names = FALSE)
