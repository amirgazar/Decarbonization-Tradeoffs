theme_minimal()
# Display the plot
plot_npv_gdp_ratio_percent
# Save the final plot
ggsave(filename = "npv_gdp_ratio_percent.png", path = path, plot = plot_npv_gdp_ratio_percent, width = 14, height =
# Install required libraries
library(dplyr)
library(readxl)
# Install required libraries
library(dplyr)
library(readxl)
library(data.table)
# Define the start and end year
start_year <- 2025
end_year <- 2050
years <- start_year:end_year
year_data <- data.frame(Year = years)
# Set the Path
path <- "/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/AEO 2023/population_GDP_growth.xlsx"
# Demand Data
household_data <- read_excel(path)
household_data <- household_data %>%
filter(Year >= start_year & Year <= end_year)
colnames(household_data) <- c("Year", "n_households_millions", "GDP_bUSD_2012")
# GDP Per Capita convert to 2023
# API KEY 63522eae4ec927d6f1d9d86bf7826cc8
fredr_set_key("63522eae4ec927d6f1d9d86bf7826cc8")
cpi_data <- fredr(series_id = "CPIAUCSL", observation_start = as.Date("2000-01-01"), observation_end = as.Date("2024-01-01"))
# Extracting CPI values for specific years
cpi_2012 <- filter(cpi_data, year(date) == 2012) %>% summarise(YearlyAvg = mean(value))
cpi_2023 <- filter(cpi_data, year(date) == 2023) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2023$YearlyAvg / cpi_2012$YearlyAvg
household_data <- household_data %>%
mutate(GDP_bUSD_2023 = GDP_bUSD_2012 * conversion_rate)
# Load the combined NPV from the saved CSV file
combined_NPV <- read.csv("/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/R Files/NPV Results/All_Costs/All_Costs.csv")
# Calculate the number of years
n_years <- end_year - start_year + 1
# Define the discount rate
discount_rate <- 0.02
combined_NPV <- combined_NPV %>%
mutate(Annual_Cost_bUSD = (Cost_bUSD * discount_rate) / (1 - (1 + discount_rate)^(-n_years)))
expanded_npv_data <- combined_NPV %>%
select(Cost_Type, Statistic, Scenario_Label, Annual_Cost_bUSD) %>%
slice(rep(1:n(), each = length(years))) %>%
mutate(Year = rep(years, times = nrow(combined_NPV)))
# Reorder the columns if necessary
expanded_npv_data <- expanded_npv_data %>%
select(Year, everything())
expanded_npv_data <- expanded_npv_data %>%
left_join(household_data, by = "Year")
# Calculate the cost per household and add it as a new column
expanded_npv_data <- expanded_npv_data %>%
mutate(Cost_USD_per_household = (Annual_Cost_bUSD / (n_households_millions * 1e6)) * 1e9) %>%
mutate(NPV_GDP_ratio = Annual_Cost_bUSD / GDP_bUSD_2023)
# Calculate the mean annual value for each scenario, cost type, and statistic
mean_annual_data <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(Cost_USD_per_household = mean(Cost_USD_per_household), .groups = "drop")
# Calculate min, mean, and max annual costs for the combined data
min_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_min = sum(Cost_USD_per_household[Statistic == "min"]), .groups = 'drop')
max_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_max = sum(Cost_USD_per_household[Statistic == "max"]), .groups = 'drop')
mean_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_mean = sum(Cost_USD_per_household[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data <- mean_annual_data %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios
plot_combined_all <- ggplot() +
geom_bar(data = mean_annual_data %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = Cost_USD_per_household, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_costs_all,
aes(x = Scenario_Label, ymin = min_costs_all$Total_Cost_USD_min, ymax = max_costs_all$Total_Cost_USD_max),
width = 0.2, color = "black") +
geom_text(data = max_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_max,
label = scales::comma(Total_Cost_USD_max)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_min,
label = scales::comma(Total_Cost_USD_min)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "Average Annual Costs (2023-USD) per Household for New England's Decarbonization Pathways",
y = "Annual Cost of Decarbonization per Household (2023-USD)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_combined_all
# Save the final plot
path <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs"
#ggsave(filename = "cost_per_household.png", path = path, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Convert NPV_GDP_ratio to percentage and round to one decimal place
expanded_npv_data <- expanded_npv_data %>%
mutate(NPV_GDP_ratio_percent = round(NPV_GDP_ratio * 100, 1))
# Calculate the mean annual value for each scenario, cost type, and statistic for NPV_GDP_ratio
mean_annual_data_npv <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(NPV_GDP_ratio_percent = mean(NPV_GDP_ratio_percent), .groups = "drop")
# Calculate min, mean, and max NPV_GDP_ratio percentages for the combined data
min_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_min_percent = sum(NPV_GDP_ratio_percent[Statistic == "min"]), .groups = 'drop')
max_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_max_percent = sum(NPV_GDP_ratio_percent[Statistic == "max"]), .groups = 'drop')
mean_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_mean_percent = sum(NPV_GDP_ratio_percent[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data_npv <- mean_annual_data_npv %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios for NPV_GDP_ratio percentage
plot_npv_gdp_ratio_percent <- ggplot() +
geom_bar(data = mean_annual_data_npv %>% filter(Statistic ==
gjca)fdsa
# Install required libraries
library(dplyr)
library(readxl)
library(data.table)
# Define the start and end year
start_year <- 2025
end_year <- 2050
years <- start_year:end_year
year_data <- data.frame(Year = years)
# Set the Path
path <- "/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/AEO 2023/population_GDP_growth.xlsx"
# Demand Data
household_data <- read_excel(path)
household_data <- household_data %>%
filter(Year >= start_year & Year <= end_year)
colnames(household_data) <- c("Year", "n_households_millions", "GDP_bUSD_2012")
# GDP Per Capita convert to 2023
# API KEY 63522eae4ec927d6f1d9d86bf7826cc8
fredr_set_key("63522eae4ec927d6f1d9d86bf7826cc8")
cpi_data <- fredr(series_id = "CPIAUCSL", observation_start = as.Date("2000-01-01"), observation_end = as.Date("2024-01-01"))
# Extracting CPI values for specific years
cpi_2012 <- filter(cpi_data, year(date) == 2012) %>% summarise(YearlyAvg = mean(value))
cpi_2023 <- filter(cpi_data, year(date) == 2023) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2023$YearlyAvg / cpi_2012$YearlyAvg
household_data <- household_data %>%
mutate(GDP_bUSD_2023 = GDP_bUSD_2012 * conversion_rate)
# Load the combined NPV from the saved CSV file
combined_NPV <- read.csv("/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/R Files/NPV Results/All_Costs/All_Costs.csv")
# Calculate the number of years
n_years <- end_year - start_year + 1
# Define the discount rate
discount_rate <- 0.02
combined_NPV <- combined_NPV %>%
mutate(Annual_Cost_bUSD = (Cost_bUSD * discount_rate) / (1 - (1 + discount_rate)^(-n_years)))
expanded_npv_data <- combined_NPV %>%
select(Cost_Type, Statistic, Scenario_Label, Annual_Cost_bUSD) %>%
slice(rep(1:n(), each = length(years))) %>%
mutate(Year = rep(years, times = nrow(combined_NPV)))
# Reorder the columns if necessary
expanded_npv_data <- expanded_npv_data %>%
select(Year, everything())
expanded_npv_data <- expanded_npv_data %>%
left_join(household_data, by = "Year")
# Calculate the cost per household and add it as a new column
expanded_npv_data <- expanded_npv_data %>%
mutate(Cost_USD_per_household = (Annual_Cost_bUSD / (n_households_millions * 1e6)) * 1e9) %>%
mutate(NPV_GDP_ratio = Annual_Cost_bUSD / GDP_bUSD_2023)
# Calculate the mean annual value for each scenario, cost type, and statistic
mean_annual_data <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(Cost_USD_per_household = mean(Cost_USD_per_household), .groups = "drop")
# Calculate min, mean, and max annual costs for the combined data
min_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_min = sum(Cost_USD_per_household[Statistic == "min"]), .groups = 'drop')
max_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_max = sum(Cost_USD_per_household[Statistic == "max"]), .groups = 'drop')
mean_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_mean = sum(Cost_USD_per_household[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data <- mean_annual_data %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios
plot_combined_all <- ggplot() +
geom_bar(data = mean_annual_data %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = Cost_USD_per_household, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_costs_all,
aes(x = Scenario_Label, ymin = min_costs_all$Total_Cost_USD_min, ymax = max_costs_all$Total_Cost_USD_max),
width = 0.2, color = "black") +
geom_text(data = max_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_max,
label = scales::comma(Total_Cost_USD_max)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_min,
label = scales::comma(Total_Cost_USD_min)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "Average Annual Costs (2023-USD) per Household for New England's Decarbonization Pathways",
y = "Annual Cost of Decarbonization per Household (2023-USD)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_combined_all
# Save the final plot
path <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs"
#ggsave(filename = "cost_per_household.png", path = path, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Convert NPV_GDP_ratio to percentage and round to one decimal place
expanded_npv_data <- expanded_npv_data %>%
mutate(NPV_GDP_ratio_percent = round(NPV_GDP_ratio * 100, 1))
# Calculate the mean annual value for each scenario, cost type, and statistic for NPV_GDP_ratio
mean_annual_data_npv <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(NPV_GDP_ratio_percent = mean(NPV_GDP_ratio_percent), .groups = "drop")
# Calculate min, mean, and max NPV_GDP_ratio percentages for the combined data
min_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_min_percent = sum(NPV_GDP_ratio_percent[Statistic == "min"]), .groups = 'drop')
max_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_max_percent = sum(NPV_GDP_ratio_percent[Statistic == "max"]), .groups = 'drop')
mean_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_mean_percent = sum(NPV_GDP_ratio_percent[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data_npv <- mean_annual_data_npv %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios for NPV_GDP_ratio percentage
plot_npv_gdp_ratio_percent <- ggplot() +
geom_bar(data = mean_annual_data_npv %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = NPV_GDP_ratio_percent, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_npv_gdp_ratio_percent,
aes(x = Scenario_Label, ymin = min_npv_gdp_ratio_percent$Total_NPV_GDP_min_percent, ymax = max_npv_gdp_ratio_percent$Total_NPV_GDP_max_percent),
width = 0.2, color = "black") +
geom_text(data = max_npv_gdp_ratio_percent,
aes(x = Scenario_Label, y = Total_NPV_GDP_max_percent,
label = scales::comma(Total_NPV_GDP_max_percent)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_npv_gdp_ratio_percent,
aes(x = Scenario_Label, y = Total_NPV_GDP_min_percent,
label = scales::comma(Total_NPV_GDP_min_percent)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "NPV to GDP Ratio as Percentage for New England's Decarbonization Pathways",
y = "NPV to GDP Ratio (%)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_npv_gdp_ratio_percent
# Save the final plot
ggsave(filename = "npv_gdp_ratio_percent.png", path = path, plot = plot_npv_gdp_ratio_percent, width = 14, height = 7, dpi = 300)
View(expanded_npv_data)
# Install required libraries
library(dplyr)
library(readxl)
library(data.table)
# Define the start and end year
start_year <- 2025
end_year <- 2050
years <- start_year:end_year
year_data <- data.frame(Year = years)
# Set the Path
path <- "/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/AEO 2023/population_GDP_growth.xlsx"
# Demand Data
household_data <- read_excel(path)
household_data <- household_data %>%
filter(Year >= start_year & Year <= end_year)
colnames(household_data) <- c("Year", "n_households_millions", "GDP_bUSD_2012")
# GDP Per Capita convert to 2023
# API KEY 63522eae4ec927d6f1d9d86bf7826cc8
fredr_set_key("63522eae4ec927d6f1d9d86bf7826cc8")
cpi_data <- fredr(series_id = "CPIAUCSL", observation_start = as.Date("2000-01-01"), observation_end = as.Date("2024-01-01"))
# Extracting CPI values for specific years
cpi_2012 <- filter(cpi_data, year(date) == 2012) %>% summarise(YearlyAvg = mean(value))
cpi_2023 <- filter(cpi_data, year(date) == 2023) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2023$YearlyAvg / cpi_2012$YearlyAvg
household_data <- household_data %>%
mutate(GDP_bUSD_2023 = GDP_bUSD_2012 * conversion_rate)
# Load the combined NPV from the saved CSV file
combined_NPV <- read.csv("/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/R Files/NPV Results/All_Costs/All_Costs.csv")
# Calculate the number of years
n_years <- end_year - start_year + 1
# Define the discount rate
discount_rate <- 0.02
combined_NPV <- combined_NPV %>%
mutate(Annual_Cost_bUSD = (Cost_bUSD * discount_rate) / (1 - (1 + discount_rate)^(-n_years)))
expanded_npv_data <- combined_NPV %>%
select(Cost_Type, Statistic, Scenario_Label, Annual_Cost_bUSD) %>%
slice(rep(1:n(), each = length(years))) %>%
mutate(Year = rep(years, times = nrow(combined_NPV)))
# Reorder the columns if necessary
expanded_npv_data <- expanded_npv_data %>%
select(Year, everything())
expanded_npv_data <- expanded_npv_data %>%
left_join(household_data, by = "Year")
# Calculate the cost per household and add it as a new column
expanded_npv_data <- expanded_npv_data %>%
mutate(Cost_USD_per_household = (Annual_Cost_bUSD / (n_households_millions * 1e6)) * 1e9) %>%
mutate(NPV_GDP_ratio = Annual_Cost_bUSD / GDP_bUSD_2023)
# Calculate the mean annual value for each scenario, cost type, and statistic
mean_annual_data <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(Cost_USD_per_household = mean(Cost_USD_per_household), .groups = "drop")
# Calculate min, mean, and max annual costs for the combined data
min_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_min = sum(Cost_USD_per_household[Statistic == "min"]), .groups = 'drop')
max_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_max = sum(Cost_USD_per_household[Statistic == "max"]), .groups = 'drop')
mean_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_mean = sum(Cost_USD_per_household[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data <- mean_annual_data %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios
plot_combined_all <- ggplot() +
geom_bar(data = mean_annual_data %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = Cost_USD_per_household, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_costs_all,
aes(x = Scenario_Label, ymin = min_costs_all$Total_Cost_USD_min, ymax = max_costs_all$Total_Cost_USD_max),
width = 0.2, color = "black") +
geom_text(data = max_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_max,
label = scales::comma(Total_Cost_USD_max)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_min,
label = scales::comma(Total_Cost_USD_min)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "Average Annual Costs (2023-USD) per Household for New England's Decarbonization Pathways",
y = "Annual Cost of Decarbonization per Household (2023-USD)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_combined_all
# Save the final plot
path <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs"
#ggsave(filename = "cost_per_household.png", path = path, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Convert NPV_GDP_ratio to percentage and round to one decimal place
expanded_npv_data <- expanded_npv_data %>%
mutate(NPV_GDP_ratio_percent = round(NPV_GDP_ratio * 100, 3))
View(expanded_npv_data)
View(expanded_npv_data)
# Calculate the mean annual value for each scenario, cost type, and statistic for NPV_GDP_ratio
mean_annual_data_npv <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(NPV_GDP_ratio_percent = mean(NPV_GDP_ratio_percent), .groups = "drop")
View(mean_annual_data_npv)
# Calculate min, mean, and max NPV_GDP_ratio percentages for the combined data
min_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_min_percent = sum(NPV_GDP_ratio_percent[Statistic == "min"]), .groups = 'drop')
View(min_npv_gdp_ratio_percent)
max_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_max_percent = sum(NPV_GDP_ratio_percent[Statistic == "max"]), .groups = 'drop')
mean_npv_gdp_ratio_percent <- mean_annual_data_npv %>%
group_by(Scenario_Label) %>%
summarize(Total_NPV_GDP_mean_percent = sum(NPV_GDP_ratio_percent[Statistic == "mean"]), .groups = 'drop')
View(mean_npv_gdp_ratio_percent)
View(max_npv_gdp_ratio_percent)
# Reverse the order to have CAPEX at the top
mean_annual_data_npv <- mean_annual_data_npv %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios for NPV_GDP_ratio percentage
plot_npv_gdp_ratio_percent <- ggplot() +
geom_bar(data = mean_annual_data_npv %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = NPV_GDP_ratio_percent, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_npv_gdp_ratio_percent,
aes(x = Scenario_Label, ymin = min_npv_gdp_ratio_percent$Total_NPV_GDP_min_percent, ymax = max_npv_gdp_ratio_percent$Total_NPV_GDP_max_percent),
width = 0.2, color = "black") +
geom_text(data = max_npv_gdp_ratio_percent,
aes(x = Scenario_Label, y = Total_NPV_GDP_max_percent,
label = scales::comma(Total_NPV_GDP_max_percent)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_npv_gdp_ratio_percent,
aes(x = Scenario_Label, y = Total_NPV_GDP_min_percent,
label = scales::comma(Total_NPV_GDP_min_percent)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "NPV to GDP Ratio as Percentage for New England's Decarbonization Pathways",
y = "NPV to GDP Ratio (%)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_npv_gdp_ratio_percent
# Install required libraries
library(dplyr)
library(readxl)
library(data.table)
# Define the start and end year
start_year <- 2025
end_year <- 2050
years <- start_year:end_year
year_data <- data.frame(Year = years)
# Set the Path
path <- "/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/AEO 2023/population_GDP_growth.xlsx"
# Demand Data
household_data <- read_excel(path)
household_data <- household_data %>%
filter(Year >= start_year & Year <= end_year)
colnames(household_data) <- c("Year", "n_households_millions", "GDP_bUSD_2012")
# GDP Per Capita convert to 2023
# API KEY 63522eae4ec927d6f1d9d86bf7826cc8
fredr_set_key("63522eae4ec927d6f1d9d86bf7826cc8")
cpi_data <- fredr(series_id = "CPIAUCSL", observation_start = as.Date("2000-01-01"), observation_end = as.Date("2024-01-01"))
# Extracting CPI values for specific years
cpi_2012 <- filter(cpi_data, year(date) == 2012) %>% summarise(YearlyAvg = mean(value))
cpi_2023 <- filter(cpi_data, year(date) == 2023) %>% summarise(YearlyAvg = mean(value))
# Calculating conversion rate
conversion_rate <- cpi_2023$YearlyAvg / cpi_2012$YearlyAvg
household_data <- household_data %>%
mutate(GDP_bUSD_2023 = GDP_bUSD_2012 * conversion_rate)
# Load the combined NPV from the saved CSV file
combined_NPV <- read.csv("/Users/amirgazar/Documents/GitHub/EPA_Debarbonization/R Files/NPV Results/All_Costs/All_Costs.csv")
# Calculate the number of years
n_years <- end_year - start_year + 1
# Define the discount rate
discount_rate <- 0.02
combined_NPV <- combined_NPV %>%
mutate(Annual_Cost_bUSD = (Cost_bUSD * discount_rate) / (1 - (1 + discount_rate)^(-n_years)))
expanded_npv_data <- combined_NPV %>%
select(Cost_Type, Statistic, Scenario_Label, Annual_Cost_bUSD) %>%
slice(rep(1:n(), each = length(years))) %>%
mutate(Year = rep(years, times = nrow(combined_NPV)))
# Reorder the columns if necessary
expanded_npv_data <- expanded_npv_data %>%
select(Year, everything())
expanded_npv_data <- expanded_npv_data %>%
left_join(household_data, by = "Year")
# Calculate the cost per household and add it as a new column
expanded_npv_data <- expanded_npv_data %>%
mutate(Cost_USD_per_household = (Annual_Cost_bUSD / (n_households_millions * 1e6)) * 1e9) %>%
mutate(NPV_GDP_ratio = Annual_Cost_bUSD / GDP_bUSD_2023)
# Calculate the mean annual value for each scenario, cost type, and statistic
mean_annual_data <- expanded_npv_data %>%
group_by(Cost_Type, Statistic, Scenario_Label) %>%
summarize(Cost_USD_per_household = mean(Cost_USD_per_household), .groups = "drop")
# Calculate min, mean, and max annual costs for the combined data
min_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_min = sum(Cost_USD_per_household[Statistic == "min"]), .groups = 'drop')
max_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_max = sum(Cost_USD_per_household[Statistic == "max"]), .groups = 'drop')
mean_costs_all <- mean_annual_data %>%
group_by(Scenario_Label) %>%
summarize(Total_Cost_USD_mean = sum(Cost_USD_per_household[Statistic == "mean"]), .groups = 'drop')
# Reverse the order to have CAPEX at the top
mean_annual_data <- mean_annual_data %>%
mutate(Cost_Type = factor(Cost_Type, levels = rev(c("CAPEX", "Fixed O&M", "Variable O&M", "Imports", "Fuel", "GHG Emissions", "Air Emissions", "Unmet Demand Penalty"))))
# Create the plot with all scenarios
plot_combined_all <- ggplot() +
geom_bar(data = mean_annual_data %>% filter(Statistic == "mean"),
aes(x = Scenario_Label, y = Cost_USD_per_household, fill = Cost_Type),
stat = "identity", position = "stack") +
geom_errorbar(data = mean_costs_all,
aes(x = Scenario_Label, ymin = min_costs_all$Total_Cost_USD_min, ymax = max_costs_all$Total_Cost_USD_max),
width = 0.2, color = "black") +
geom_text(data = max_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_max,
label = scales::comma(Total_Cost_USD_max)),
vjust = -0.5, color = "black", size = 4) +
geom_text(data = min_costs_all,
aes(x = Scenario_Label, y = Total_Cost_USD_min,
label = scales::comma(Total_Cost_USD_min)),
vjust = 1.5, color = "black", size = 4) +
labs(title = "Average Annual Costs (2023-USD) per Household for New England's Decarbonization Pathways",
y = "Annual Cost of Decarbonization per Household (2023-USD)", x = "Pathway") +
theme_minimal() +
scale_fill_viridis_d() +
scale_y_continuous(labels = scales::comma)
# Display the plot
plot_combined_all
# Save the final plot
path <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs"
ggsave(filename = "cost_per_household.png", path = path, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/Costs/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/Plots/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/R Files/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
# Save the final plot
path_2 <- "/Users/amirgazar/Documents/GitHub/EPA_Decarbonization/"
ggsave(filename = "cost_per_household.png", path = path_2, plot = plot_combined_all, width = 14, height = 7, dpi = 300)
